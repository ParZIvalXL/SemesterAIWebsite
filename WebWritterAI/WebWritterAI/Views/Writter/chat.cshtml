<!DOCTYPE html>
<html lang="en" xmlns="http://www.w3.org/1999/html">

<head>
    <meta charset="UTF-8">
    <meta name="author" content="Softnio">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="shortcut icon" href="/docs/images/favicon.png">
    <link rel="stylesheet" href="/copygen-html/html/assets/css/style.css?v1.2.0">
    <title>AI Chat - CopyGen</title>
    <style>
        .ai-message.loading {
            color: #666;
            font-style: italic;
        }
        .chat-container {
            display: flex;
            height: calc(100vh - 150px);
            gap: 20px;
            margin-top: 20px;
        }
        .chat-history {
            width: 300px;
            border-right: 1px solid #eee;
            overflow-y: auto;
            padding-right: 15px;
        }
        .chat-main {
            flex: 1;
            display: flex;
            flex-direction: column;
        }
        .chat-messages {
            flex: 1;
            overflow-y: auto;
            margin-bottom: 20px;
            padding: 15px;
            background: #f9f9f9;
            border-radius: 8px;
        }
        .chat-input {
            display: flex;
            gap: 10px;
            margin-bottom: 20px;
        }
        .chat-input textarea {
            flex: 1;
            padding: 10px;
            border-radius: 4px;
            border: 1px solid #ddd;
            resize: none;
            min-height: 60px;
        }
        .chat-input button {
            padding: 0 20px;
        }
        .chat-item {
            padding: 10px;
            margin-bottom: 10px;
            border-radius: 4px;
            cursor: pointer;
            background: #f5f5f5;
        }
        .chat-item.active {
            background: #e0f0ff;
            font-weight: bold;
        }
        .message {
            margin-bottom: 15px;
            padding: 10px;
            border-radius: 8px;
            max-width: 80%;
        }
        .user-message {
            background: #e3f2fd;
            margin-left: auto;
        }
        .ai-message {
            background: #f1f1f1;
            margin-right: auto;
        }
        .message-time {
            font-size: 0.8em;
            color: #666;
            margin-top: 5px;
            text-align: right;
        }
    </style>
</head>

<body class="nk-body" data-menu-collapse="lg">
<div class="nk-app-root ">
    <header class="nk-header">
        @await Html.PartialAsync("Header")
    </header><!-- .nk-header -->
    <main class="nk-pages">
        <section class="section section-bottom-0 section-top-0">
            <div class="container">
                <div class="section-content">
                    <div class="card border-0 shadow-sm rounded-4">
                        <div class="card-body">
                            <h3 class="title fw-medium mb-4">AI Chat</h3>
                            <div class="chat-container">
                                <!-- Боковая панель с историей чатов -->
                                <div class="chat-history" id="chatHistory">
                                    <div class="chat-item active" data-chat-id="new">
                                        <div>Новый чат</div>
                                        <div class="text-muted small">Только что</div>
                                    </div>
                                    <!-- Здесь будут добавляться предыдущие чаты -->
                                </div>

                                <!-- Основная область чата -->
                                <div class="chat-main">
                                    <div class="chat-messages" id="chatMessages">
                                        <!-- Сообщения будут добавляться здесь -->
                                        <div class="text-center text-muted">Начните новый разговор с ИИ</div>
                                    </div>

                                    <div class="chat-input">
                                        <textarea id="messageInput" placeholder="Напишите сообщение..."></textarea>
                                        <button class="btn btn-primary" id="sendButton">Отправить</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div><!-- .section-content -->
        </section>
    </main>
    <footer class="nk-footer">
        @await Html.PartialAsync("Footer");
    </footer>
</div>
@await Html.PartialAsync("Scripts");
<script>
    document.addEventListener('DOMContentLoaded', async function() {
        const chatHistory = document.getElementById('chatHistory');
        const chatMessages = document.getElementById('chatMessages');
        const messageInput = document.getElementById('messageInput');
        const sendButton = document.getElementById('sendButton');

        let currentChatId = 'new';
        let chats = {
            'new': {
                id: 'new',
                title: 'Новый чат',
                lastMessageTime: new Date(),
                messages: []
            }
        };

        // Проверка авторизации перед началом
        if (!await checkAuth()) {
            window.location.href = '/auth/login';
            return;
        }

        // Загружаем чаты с сервера
        await loadChats();

        // Отрисовка истории чатов
        function renderChatHistory() {
            chatHistory.innerHTML = '';

            // Сортируем чаты по времени последнего сообщения
            const sortedChats = Object.values(chats).sort((a, b) =>
                new Date(b.lastMessageTime) - new Date(a.lastMessageTime));

            sortedChats.forEach(chat => {
                const chatItem = document.createElement('div');
                chatItem.className = `chat-item ${chat.id === currentChatId ? 'active' : ''}`;
                chatItem.dataset.chatId = chat.id;

                const timeStr = formatTime(chat.lastMessageTime);

                chatItem.innerHTML = `
                <div>${chat.title}</div>
                <div class="text-muted small">${timeStr}</div>
            `;

                chatItem.addEventListener('click', () => switchChat(chat.id));
                chatHistory.appendChild(chatItem);
            });
        }

        // Переключение между чатами
        async function switchChat(chatId) {
            currentChatId = chatId;
            renderChatHistory();

            if (chatId !== 'new') {
                await loadMessages(chatId);
            } else {
                renderMessages();
            }
        }

        // Загрузка сообщений чата
        async function loadMessages(chatId) {
            try {
                const response = await fetch(`/Writter/messages/${chatId}`);
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const data = await response.json();

                // Проверяем несколько возможных форматов ответа
                let messagesArray;
                if (Array.isArray(data)) {
                    messagesArray = data;
                } else if (data && Array.isArray(data.messages)) {
                    messagesArray = data.messages;
                } else if (data && data.data && Array.isArray(data.data)) {
                    messagesArray = data.data;
                } else {
                    throw new Error('Invalid messages format received from server');
                }

                chats[chatId].messages = messagesArray.map(msg => ({
                    text: msg.message || msg.text || '',
                    sender: msg.userId === "00000000-0000-0000-0000-000000000000" ? 'ai' : 'user',
                    time: new Date(msg.createdAt || msg.time || Date.now())
                }));

                renderMessages();
            } catch (error) {
                console.error('Error loading messages:', error);
                showError('Не удалось загрузить сообщения: ' + error.message);
            }
        }

        // Создание нового чата
        async function createChat(title) {
            try {
                const response = await fetch('/Writter/create-chat', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ name: title })
                });

                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.error || 'Failed to create chat');
                }

                const data = await response.json();
                return data.chatId;
            } catch (error) {
                console.error('Error creating chat:', error);
                showError('Не удалось создать новый чат: ' + error.message);
                throw error;
            }
        }

        // Отправка сообщения
        async function sendMessage() {
            const text = messageInput.value.trim();
            if (!text) return;

            try {
                let chatId = currentChatId;

                // Создаем новый чат, если это первый сообщение
                if (chatId === 'new') {
                    const newChatTitle = text.length > 30 ? text.substring(0, 30) + '...' : text;
                    chatId = await createChat(newChatTitle);

                    chats[chatId] = {
                        id: chatId,
                        title: newChatTitle,
                        lastMessageTime: new Date(),
                        messages: []
                    };

                    currentChatId = chatId;
                }

                // Добавляем сообщение пользователя
                await addMessageToChat(chatId, text, 'user');

                // Очищаем поле ввода
                messageInput.value = '';

                // Обновляем интерфейс
                renderChatHistory();
                renderMessages();

                // Отправляем запрос к ИИ
                await getAIResponse(chatId, text);

            } catch (error) {
                console.error('Error in sendMessage:', error);
                showError('Ошибка при отправке сообщения: ' + error.message);
            }
        }

        // Добавление сообщения в чат (и на сервер)
        async function addMessageToChat(chatId, text, sender, isFromAI = false) {
            const message = {
                text: text,
                sender: sender,
                time: new Date(),
                isFromAI: isFromAI
            };

            // Добавляем в локальное хранилище
            chats[chatId].messages.push(message);
            chats[chatId].lastMessageTime = new Date();

            // Сохраняем на сервере
            try {
                const response = await fetch(`/Writter/send-message/${chatId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        message: text,
                        isFromAI: isFromAI
                    })
                });

                if (!response.ok) {
                    throw new Error('Failed to save message');
                }
            } catch (error) {
                console.error('Error saving message:', error);
                throw error;
            }
        }

        // Получение ответа от ИИ
        async function getAIResponse(chatId, prompt) {
            // Добавляем индикатор загрузки
            const loadingMessage = {
                text: 'ИИ думает...',
                sender: 'ai',
                time: new Date(),
                loading: true
            };

            chats[chatId].messages.push(loadingMessage);
            renderMessages();

            try {
                const response = await fetch('/Writter/send', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ message: prompt })
                });

                if (!response.ok) {
                    throw new Error(`Server error: ${response.status}`);
                }

                const data = await response.json();

                // Удаляем индикатор загрузки
                chats[chatId].messages = chats[chatId].messages.filter(m => !m.loading);

                // Добавляем ответ ИИ
                await addMessageToChat(chatId, data.response, 'ai', true);

            } catch (error) {
                console.error('Error getting AI response:', error);

                // Удаляем индикатор загрузки
                chats[chatId].messages = chats[chatId].messages.filter(m => !m.loading);

                // Добавляем сообщение об ошибке
                await addMessageToChat(
                    chatId,
                    'Произошла ошибка при получении ответа от ИИ. Пожалуйста, попробуйте позже.',
                    'ai',
                    true
                );
            } finally {
                renderMessages();
            }
        }

        // Проверка авторизации
        async function checkAuth() {
            try {
                const response = await fetch('/Writter/chat');
                if (response.redirected) {
                    return false;
                }
                return true;
            } catch (error) {
                console.error('Auth check failed:', error);
                return false;
            }
        }

        // Загрузка списка чатов
        async function loadChats() {
            try {
                const response = await fetch("/Writter/chats");
                if (!response.ok) throw new Error('Failed to load chats');

                const data = await response.json();

                // Проверяем, что data.chats существует и является массивом
                const serverChats = Array.isArray(data.chats) ? data.chats :
                    Array.isArray(data) ? data : [];

                serverChats.forEach(chat => {
                    chats[chat.id] = {
                        id: chat.id,
                        title: chat.name || chat.title || 'Без названия',
                        lastMessageTime: new Date(chat.createdAt || chat.lastMessageTime || Date.now()),
                        messages: []
                    };
                });

                renderChatHistory();
            } catch (error) {
                console.error('Error loading chats:', error);
                showError('Не удалось загрузить историю чатов');
            }
        }

        // Отрисовка сообщений текущего чата
        function renderMessages() {
            chatMessages.innerHTML = '';

            const chat = chats[currentChatId];
            if (!chat || chat.messages.length === 0) {
                chatMessages.innerHTML = '<div class="text-center text-muted">Начните новый разговор с ИИ</div>';
                return;
            }

            chat.messages.forEach(msg => {
                const messageDiv = document.createElement('div');
                messageDiv.className = `message ${msg.sender === 'user' ? 'user-message' : 'ai-message'}`;

                const timeStr = formatTime(msg.time);

                messageDiv.innerHTML = `
                <div>${msg.text}</div>
                <div class="message-time">${timeStr}</div>
            `;

                chatMessages.appendChild(messageDiv);
            });

            // Прокрутка вниз
            chatMessages.scrollTop = chatMessages.scrollHeight;
        }

        // Вспомогательные функции
        function formatTime(date) {
            return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
        }

        function showError(message) {
            const errorDiv = document.createElement('div');
            errorDiv.className = 'error-message';
            errorDiv.textContent = message;
            document.body.appendChild(errorDiv);
            setTimeout(() => errorDiv.remove(), 5000);
        }

        // Обработчики событий
        sendButton.addEventListener('click', sendMessage);
        messageInput.addEventListener('keydown', (e) => {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                sendMessage();
            }
        });

        // Инициализация
        renderChatHistory();
        renderMessages();
    });
</script>
</body>
</html>